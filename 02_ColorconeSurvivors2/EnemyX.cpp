//=========================================================================================
//
// エネミー
// Author:日野澤匠泉	[enemyX.cpp]
//
//=========================================================================================
#include "main.h"
#include "enemyX.h"
#include "manager.h"
#include "renderer.h"
#include "debugproc.h"
#include "objectX.h"
#include "playerx.h"
#include "score.h"
#include "time.h"
#include "game.h"
#include "spawner.h"

//=========================================================================================
//マクロ定義
//=========================================================================================
#define ENEMYMOVE	(2.0f)		//移動量

//*****************************************************************************************
//静的メンバ変数
//*****************************************************************************************
int CEnemyX::m_Count = 0;

//=========================================================================================
//エネミーのコンストラクタ	
//=========================================================================================
CEnemyX::CEnemyX()
{

}

//=========================================================================================
//エネミーのデストラクタ
//=========================================================================================
CEnemyX::~CEnemyX()
{

}

//=========================================================================================
//エネミーの初期化処理
//=========================================================================================
HRESULT CEnemyX::Init(void)
{
	//オブジェクトの初期化処理
	CObjectX::Init("data\\MODEL\\enemy_00.x");

	//種類の設定
	SetType(TYPE_ENEMYX);

	return S_OK;
}

//=========================================================================================
//エネミーの終了処理
//=========================================================================================
void CEnemyX::Uninit(void)
{
	//オブジェクトの終了処理
	CObjectX::Uninit();

	//カウンター加算
	m_Count++;
}

//=========================================================================================
//エネミーの更新処理
//=========================================================================================
void CEnemyX::Update(void)
{
	//デバッグ情報取得
	CDebugProc *pDebug = CManager::GetManager()->GetDebugProc();

	//位置情報取得処理
	D3DXVECTOR3 pos = CObjectX::GetPosition();

	//変数宣言
	D3DXVECTOR3 Dest;
	float fRotMove, fRotDest, fRotDiff;

	//エネミー位置取得
	D3DXVECTOR3 EnemyPos = CObjectX::GetPosition();
	EnemyPos.y = 40.0f;

	//エネミー角度取得
	D3DXVECTOR3 EnemyRot = CObjectX::GetRot();

	//エネミー移動量取得
	D3DXVECTOR3 EnemyMove = CObjectX::GetMove();

	//プレイヤー情報取得
	CPlayerX *pPlayer = CGame::GetPlayer();
	D3DXVECTOR3 PlayerPos = pPlayer->GetPosition();

	Dest = PlayerPos - EnemyPos;			//目標の向き
	fRotMove = EnemyRot.y;					//現在の移動方向(角度)
	fRotDest = atan2f(Dest.x, Dest.z);		//目標の移動方向(角度)
	fRotDiff = fRotDest - fRotMove;			//目標の移動方向までの差分

	//移動方向の補正
	if (fRotDiff > D3DX_PI || fRotDiff < -D3DX_PI)
	{
		if (fRotDiff > D3DX_PI)
		{
			fRotDiff += -D3DX_PI * 2;
		}
		else if (fRotDiff < -D3DX_PI)
		{
			fRotDiff += D3DX_PI * 2;
		}
	}

	//移動方向(角度)の補正
	EnemyRot.y += fRotDiff * 0.05f;

	//移動方向の補正
	if (EnemyRot.y > D3DX_PI || EnemyRot.y < -D3DX_PI)
	{
		if (EnemyRot.y > D3DX_PI)
		{
			EnemyRot.y += -D3DX_PI * 2;
		}
		else if (EnemyRot.y < -D3DX_PI)
		{
			EnemyRot.y += D3DX_PI * 2;
		}
	}

	//移動量補正
	EnemyMove.x = sinf(EnemyRot.y) * ENEMYMOVE;
	EnemyMove.z = cosf(EnemyRot.y) * ENEMYMOVE;

	//移動量加算
	EnemyPos += EnemyMove;

	//位置更新
	SetPosition(EnemyPos);

	//向き更新
	SetRot(EnemyRot);

	//デバッグ表示
	pDebug->Print("[エネミー] ( X:%f Y:%f Z:%f )\n\n", pos.x, pos.y, pos.z);
}

//=========================================================================================
//エネミーの描画処理
//=========================================================================================
void CEnemyX::Draw(void)
{
	//オブジェクトの描画処理
	CObjectX::Draw();
}

//=========================================================================================
//エネミーの生成処理
//=========================================================================================
CEnemyX *CEnemyX::Create(void)
{
	//ポインタの変数を宣言
	CEnemyX *pEnemyX;

	//オブジェクト3Dの生成
	pEnemyX = new CEnemyX;

	if (pEnemyX != NULL)
	{//使用されているとき

		//初期化処理
		pEnemyX->Init();
	}

	//オブジェクト情報を返す
	return pEnemyX;
}

//=========================================================================================
//エネミーのヒット処理
//=========================================================================================
void CEnemyX::Hit(void)
{
	//スコアの情報取得
	CScore *pScore = CGame::GetScore();

	//スコアの加算
	pScore->AddScore(100);

	//終了処理
	CEnemyX::Uninit();
}

//=========================================================================================
//エネミーのキル数
//=========================================================================================
int CEnemyX::GetKillCount(void)
{
	return m_Count;
}

//=========================================================================================
//エネミーのキル数
//=========================================================================================
void CEnemyX::SetKillCount(int nNum)
{
	m_Count = nNum;
}