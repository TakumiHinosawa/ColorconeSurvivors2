//=========================================================================================
//
//ぶっ飛び [blown.cpp]
//Author:日野澤匠泉
//
//=========================================================================================

//*****************************************************************************************
//インクルード
//*****************************************************************************************
#include "blown.h"
#include "blowngage.h"
#include "object2d.h"
#include "manager.h"
#include "input.h"
#include "sound.h"
#include <stdio.h>

//=========================================================================================
//コンストラクタ
//=========================================================================================
CBlown::CBlown()
{
	m_nBlown = 0;
	m_nValue = 0;
	m_nCtr = 0;
	m_Dist = 0;
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
	{
		m_apNumber[nCnt] = nullptr;
	}
}

//=========================================================================================
//デストラクタ
//=========================================================================================
CBlown::~CBlown()
{

}

//=========================================================================================
//スコアの初期化処理
//=========================================================================================
HRESULT CBlown::Init(void)
{
	for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
	{
		//オブジェクト生成
		m_apNumber[nCnt] = CBlowngage::Create();
	}
	return S_OK;
}

//=========================================================================================
//スコアの終了処理
//=========================================================================================
void CBlown::Uninit(void)
{
	for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
	{
		if (m_apNumber[nCnt] != nullptr)
		{//使用されているとき

			//オブジェクト終了処理
			m_apNumber[nCnt]->Uninit();

			//オブジェクトを破棄
			delete m_apNumber[nCnt];

			//オブジェクト初期化
			m_apNumber[nCnt] = nullptr;
		}
	}
}

//=========================================================================================
//スコアの更新処理
//=========================================================================================
void CBlown::Update(void)
{
	if (m_nBlown >= 0 && m_nBlown < 60 ) {
		for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
		{//白色
			m_apNumber[nCnt]->SetCol(D3DXCOLOR(1.0f,1.0f,1.0f,1.0f));
		}
	}
	else if (m_nBlown >= 60 && m_nBlown < 80){
		for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
		{//黄色
			m_apNumber[nCnt]->SetCol(D3DXCOLOR(1.0f, 1.0f, 0.0f, 1.0f));
		}
	}
	else{
		for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
		{//赤色
			m_apNumber[nCnt]->SetCol(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f));
		}
	}
	Set();
}

//=========================================================================================
//スコアの描画処理
//=========================================================================================
void CBlown::Draw(void)
{

}

//=========================================================================================
//スコアの設定処理
//=========================================================================================
CBlown* CBlown::Create(void)
{
	//ポインタの変数を宣言
	CBlown* pBlown;

	//オブジェクト2Dの生成
	pBlown = new CBlown;

	if (pBlown != nullptr)
	{//使用されているとき

		//初期化処理
		pBlown->Init();
	}

	//オブジェクト情報を返す
	return pBlown;
}

//=========================================================================================
//スコアの設定処理
//=========================================================================================
void CBlown::Set(void)
{
	int aTexU[NUM_PLACE3];		//各桁の数値を格納

	aTexU[0] = m_nBlown % 1000 / 100;
	aTexU[1] = m_nBlown % 100 / 10;
	aTexU[2] = m_nBlown % 10;

	for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
	{
		//スコアの設定処理
		m_apNumber[nCnt]->SetScore(D3DXVECTOR3(SCREEN_WIDTH - 300.0f, SCREEN_HEIGHT - 50.0f, 0.0f), nCnt, aTexU[nCnt]);
	}
}

//=========================================================================================
//スコアの加算処理
//=========================================================================================
void CBlown::Add(int nValue)
{
	//サウンド情報取得
	CSound* pSound = CManager::GetManager()->GetSound();

	int aTexU[NUM_PLACE3];		//各桁の数値を格納

	m_nBlown += nValue;

	aTexU[0] = m_nBlown % 1000 / 100;
	aTexU[1] = m_nBlown % 100 / 10;
	aTexU[2] = m_nBlown % 10;
}

//=========================================================================================
//スコアの減算処理
//=========================================================================================
void CBlown::Sub(int nValue)
{
	int aTexU[NUM_PLACE3];		//各桁の数値を格納

	if (m_nBlown <= 0)
	{//スコアが0以下の場合

		return;
	}

	m_nBlown += nValue;

	aTexU[0] = m_nBlown % 1000 / 100;
	aTexU[1] = m_nBlown % 100 / 10;
	aTexU[2] = m_nBlown % 10;
}

//=========================================================================================
//スコアの取得
//=========================================================================================
int CBlown::Get(void)
{
	return m_nBlown;
}

//=========================================================================================
//スコアの位置設定処理
//=========================================================================================
void CBlown::SetPosition(D3DXVECTOR3 pos)
{
	int aTexU[NUM_PLACE3];		//各桁の数値を格納

	aTexU[0] = m_nBlown % 1000 / 100;
	aTexU[1] = m_nBlown % 100 / 10;
	aTexU[2] = m_nBlown % 10;

	for (int nCnt = 0; nCnt < NUM_PLACE3; nCnt++)
	{
		//スコアの設定処理
		m_apNumber[nCnt]->SetScore(pos, nCnt, aTexU[nCnt]);
	}
}

int CBlown::GetBlown(void)
{
	return m_nBlown;
}
void CBlown::SetBlown(int nBlown)
{
	m_nBlown = nBlown;
}