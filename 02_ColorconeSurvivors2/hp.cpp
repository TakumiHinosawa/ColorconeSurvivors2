//=========================================================================================
//
//[hp.cpp]
//Author:日野澤匠泉
//
//=========================================================================================

//*****************************************************************************************
//インクルード
//*****************************************************************************************
#include "hp.h"
#include "manager.h"
#include "renderer.h"
#include "object2d.h"

//*****************************************************************************************
//静的メンバ変数初期化
//*****************************************************************************************
LPDIRECT3DTEXTURE9 CHp::m_pTexture = nullptr;

//=========================================================================================
//体力のコンストラクタ
//=========================================================================================
CHp::CHp()
{
	m_pObject2D = nullptr;
}

//=========================================================================================
//体力のデストラクタ
//=========================================================================================
CHp::~CHp()
{

}

//=========================================================================================
//体力のテクスチャ読み込み
//=========================================================================================
HRESULT CHp::Load(void)
{
	//オブジェクト取得
	CRenderer* pRenderer = CManager::GetManager()->GetRenderer();

	//デバイス取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\bar.png",
		&m_pTexture);

	return S_OK;
}

//=========================================================================================
//体力のテクスチャ破棄
//=========================================================================================
void CHp::Unload(void)
{
	//テクスチャの破棄
	if (m_pTexture != nullptr)
	{
		m_pTexture->Release();
		m_pTexture = nullptr;
	}
}


//=========================================================================================
//体力の初期化処理
//=========================================================================================
HRESULT CHp::Init(void)
{
	//オブジェクト生成
	m_pObject2D = CObject2D::Create();

	return S_OK;
}

//=========================================================================================
//体力の終了処理
//=========================================================================================
void CHp::Uninit(void)
{
	if (m_pObject2D != nullptr)
	{//使用されているとき

		//使用されていない状態にする
		m_pObject2D = nullptr;
	}
}

//=========================================================================================
//体力の更新処理
//=========================================================================================
void CHp::Update(void)
{
	//オブジェクトの更新処理
	m_pObject2D->Update();

	SetHp(D3DXVECTOR3(SCREEN_WIDTH / 2.0f,500.0f,0.0f));
}

//=========================================================================================
//体力の描画処理
//=========================================================================================
void CHp::Draw(void)
{
	//オブジェクトの描画処理
	m_pObject2D->Draw();
}

//=========================================================================================
//体力の設定処理
//=========================================================================================
CHp* CHp::Create(void)
{
	//ポインタの変数を宣言
	CHp* pHp;

	//オブジェクト2Dの生成
	pHp = new CHp;

	if (pHp != nullptr)
	{//使用されているとき

		//初期化処理
		pHp->Init();

		//テクスチャの割り当て
		pHp->m_pObject2D->BindTexture(m_pTexture);
	}

	//オブジェクト情報を返す
	return pHp;
}

//=========================================================================================
//体力の設定処理
//=========================================================================================
void CHp::SetHp(D3DXVECTOR3 pos)
{
	VERTEX_2D* pVtx;

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pObject2D->GetVtx()->Lock(0, 0, (void**)&pVtx, 0);

	//位置を更新
	pVtx[0].pos = D3DXVECTOR3(pos.x - 25.0f + 50.0f, pos.y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(pos.x + 25.0f + 50.0f, pos.y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(pos.x - 25.0f + 50.0f, pos.y + 50.0f, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(pos.x + 25.0f + 50.0f, pos.y + 50.0f, 0.0f);

	//頂点バッファをアンロックする
	m_pObject2D->GetVtx()->Unlock();
}