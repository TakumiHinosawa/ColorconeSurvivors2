//=========================================================================================
//
//パーティクル処理
//Author:日野澤匠泉	[particle.cpp]
//
//=========================================================================================
#include "particle.h"
#include "effect.h"

//*****************************************************************************************
//マクロ定義
//*****************************************************************************************
#define MAX_PARTICLE	(256)		//パーティクル最大数
#define USE_PARTICLE	(80)		//パーティクル使用数
#define SIZE			(10)		//パーティクルサイズ
#define LIFE			(25)		//体力

//=========================================================================================
//パーティクルのコンストラクタ
//=========================================================================================
CParticle::CParticle()
{
	m_nLife = 0;
}

//=========================================================================================
//パーティクルのデストラクタ
//=========================================================================================
CParticle::~CParticle()
{

}

//=========================================================================================
//パーティクルの初期化処理
//=========================================================================================
HRESULT CParticle::Init(void)
{
	m_nLife = LIFE;

	return S_OK;
}

//=========================================================================================
//パーティクルの終了処理
//=========================================================================================
void CParticle::Uninit(void)
{
	Release();
}

//=========================================================================================
//パーティクルの更新処理
//=========================================================================================
void CParticle::Update(void)
{
	CEffect* pEffect = CEffect::Create();

	//角度の設定
	float fMove = (float)(rand()) / RAND_MAX * 10.0f + 10.0f;

	//移動量の設定
	D3DXVECTOR3 move;
	move.x = sinf((float)(rand() % 629 - 314) / 100.0f) * fMove;
	move.y = sinf((float)(rand() % 314) / 100.0f) * fMove;
	move.z = cosf((float)(rand() % 629 - 314) / 100.0f) * fMove;

	pEffect->SetMove(move);
	pEffect->SetPos(m_pos);

	m_nLife--;

	if (m_nLife <= 0) {
		Uninit();
	}
}

//=========================================================================================
//パーティクルの描画処理
//=========================================================================================
void CParticle::Draw(void)
{

}

//=========================================================================================
//パーティクルの配置処理
//=========================================================================================
CParticle* CParticle::Create(D3DXVECTOR3 pos,int nType)
{
	CParticle* pParticle;

	//オブジェクト3Dの生成
	pParticle = new CParticle;

	if (pParticle != nullptr)
	{//使用されているとき

		//初期化処理
		pParticle->Init();

		pParticle->m_pos = pos;
		pParticle->m_nType = nType;
	}

	//オブジェクト情報を返す
	return pParticle;
}

